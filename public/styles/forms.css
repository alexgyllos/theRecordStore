/*
SPECIFICITY & SELECTORS ---

  h2 {
    color: red;
}

  CLASS PREVAILS OVER ELEMENT TAG

  .about-me {
    color: blue;
}

  ID PREVAILS OVER CLASS

  #services {
    color: green;
}

  INLINE ELEMENT PREVAILS OVER ALL

PSEUDOSELECTORS ---

  h2:hover {

}

  FIRST CHILD & LAST CHILD

  li:first-child {
    color: blue;
}

  li:last-child {
    color: blue;
}

  li:nth(n)-child {
    color: blue;
}

  li:only-child {
    color: blue;
}

  #link:link {
    color: blue;
}

  #link:visited {
    color: red;
}

ADVANCED SELECTORS ---

  every a that follows an h2

  h2 + a {
    color: red;
}

  every button that follows a textarea and they share the same parent

  textarea ~ button {
    color: purple;
}

  every li inside a ul

  ul > li {
    color: blue;
}

  descendant selector any li that eventually goes into a ul

  ul li {
    color: green;
}

ATTRIBUTE SELECTORS ---

  Allows us to select specific attributes

  h2[attr=value]

  h2[class=subtitle]

  img[src=""]

  img[src^=""] (every source starting with this information)

  img[src$=""] (every source ending with this information)

  img[src*=""] (every source containing this information)

  class="subtitle article-subtitle"

  h2[class~=article-subtitle]

  h2[class|=article-subtitle]

BACKGROUND STYLING ---

  background: url("image address");
  background-image: url("image address");

Adds image to background

  background-repeat: no-repeat;

Stops image repetition

  background-size: 50px 100px;

  background-size: cover;

Covers entire background

  background-size: contain;

Covers as much without changing image proportions

  rgba()

Adds opacity option between 0(fully transparent)-1(fully visible)

  background: linear-gradient(to bottom right, red, blue, rgba);

GRADIENTS ---

Creates a linear gradient transitioning to the bottom right eventually fading out

  background: linear-gradient(215deg, red, blue, rgba);

Controlles angle of gradient

  background: radial-gradient(circle, red 20%, blue 40%, green 40%);

Creates a radial gradient

RELATIVE VALUES ---

Relative values:

  em(relative to standard font size)

  1vw, 1vh = 1% view point

TEXT MANIPULATION ---

  text-decoration: none; underline; line-through;

  text-transform: uppercase; lowercase; capitalize;

  text-align: left; right; center; justify;

FONT MANIPULATION ---

  font-size: 1.25em;

  font-weight: 400(normal); (0-800 bolding)

  font-style: normal; italic; oblique;

FONT FAMILY ---

  font-family: "Times New Roman", serif; sans-serif(clean); serif(curly);

EXTERNAL FONTS ---

  (google fonts)

USING EXTERNAL FONTS ---

  font-family: (select font) "Roboto", sans-serif;

LAYOUT ---

  The box model (every element is surrounded by a box)

    padding (space between content and border)

    border (separates padding from margin)

    margin (space between box and other elements)

  CHANGING CONTENT SIZE---

    keep height absolute and width relative

      height: 300px;

      width: 60%;

  CSS BORDERS ---

    border: size(2px) style(dotted...dashed---solid|, double) color;

  MARGIN & PADDING ---

    padding: 40px; padding-top: 20px;

    margin: 40px; margin-left: 10px;

    can be used like top right bottom left

    can be also used like top/bottom left/right

  FLOAT & DISPLAY TYPES ---

    block content moves content to its own space, its own block area

    inline content does not move content out of the area

    float: right; (moves block to the right and lets external content move up)

    float: inherit;(moves child object along with parent div)

    float: none;()

    display: (block, inline, none=removes block, inline-block)

  FLEXBOX ---

    container and flexed items

    set display: flex; for the parent element

    FLEX DIRECTION & WRAP ---

      flex-direction: row(-reverse) or column(-reverse);

      flex-wrap: wrap or no-wrap;

    CONTENT ALIGNMENT ---

      HORIZONTALLY

      justify-content: flex-start or flex-end or flex-center or space-around or space-between;

      VERTICALLY

      align-items: center: flex-start, flex-end, flex-center, stretch, baseline(keep everything on same baseline);

    ITEM ORDER ---

      order: 1; 2; 3; (apply to all items and apply order as needed)

    SHRINK, GROW & BASIS ---

      flex-grow: ; (every item is going to get the same amount of extra space)

      flex-shrink: 0(doesn't shrink this item) 1(default); (defines rate of shrinkage of each container)

      flex-basis: ; (defines minimum width of an item)

    'FLEX' PROPERTY ---

      flex: grow(1) shrink(1) basis(100px);

    ITEM ALIGNMENT ---

      align-self: flex-start, center, flex-end; (individual property, aligns vertically)

  GRID vs FLEXBOX ---


*/
